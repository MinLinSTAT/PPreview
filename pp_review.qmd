---
title: "PP_ADNI"
format: html
editor: visual
---

```{r}
library(tidyverse)

dat <- read_csv("adni_df.csv")


# Baseline Covariates -----------------------------------------------------

## The baseline covariates in our analysis include baseline ADAS or baseline 
## MMSE (bl), age (in years), sex (coded as ’Female’ = 1, ’Male’ = 0), 
## race (coded as ’White’ = 1, ’Other’ = 0), marital status (coded as 
## ’Married’ = 1, ’Other’ = 0), education (in years), apolipoprotein E
## (APOE4) count, and Rey’s Auditory Verbal Learning Test (RAVLT) 
## forgetting percentages. 

ADNI1 <- dat %>% filter(cohort == "ADNI1", complete.cases(ravlt))
ADNIGO2 <- dat %>% filter(cohort == "ADNIGO2")

X0_adas <- model.matrix(
        adas_diff ~ state + age + gender + ravlt + apoe4 + adas_bl + married + white + edu, 
        data = ADNI1
)
y0_adas <- ADNI1$adas_diff
        
X_adas <- model.matrix(
        adas_diff ~ state + age + gender + ravlt + apoe4 + adas_bl + 
                married + white + edu, 
        data = ADNIGO2
)
y_adas <- ADNIGO2$adas_diff

X0_mmse <- model.matrix(
        mmse_diff ~ state + age + gender + ravlt + apoe4 + mmse_bl + married + white + edu, 
        data = ADNI1
)
y0_mmse <- ADNI1$mmse_diff

X_mmse <- model.matrix(
        mmse_diff ~ state + age + gender + ravlt + apoe4 + mmse_bl + 
                married + white + edu, 
        data = ADNIGO2
)
y_mmse <- ADNIGO2$mmse_diff
```

### Borrowing-by-Parts Power Prior

$$
\beta|\sigma^2,D,D_0 \sim N\left((\Omega+a_{01}\Omega_0)^{-1}(X' y + a_{01}X_0' y_0),\ \sigma^2(\Omega+a_{01}\Omega_0)^{-1}\right),
$$ $$
\sigma^2|D,D_0\sim IG\left(\frac{v}{2},\ \frac{y'y+a_{01}\hat{y}_0'\hat{y}_0+a_{02}SSE_0-(X'y+a_{01}X_0'y_0)'(\Omega+a_{01}\Omega_0)^{-1}(X'y+a_{01}X_0'y_0)}{2}\right)
$$

and

$$
\beta|D,D_0\sim t\left((\Omega+a_{01}\Omega_0)^{-1}(X'y+a_{01}X_0'y_0),\\ \frac{y'y+a_{01}\hat{y}_0'\hat{y}_0+a_{02}SSE_0-(X'y+a_{01}X_0'y_0)'(\Omega+a_{01}\Omega_0)^{-1}(X'y+a_{01}X_0'y_0)}{v}(\Omega+a_{01}\Omega_0)^{-1},\ v\right)
$$

where $\Omega=X'X$, $\Omega_0=X_0'X_0$, and $v = n + a_{02}n_0 + (a_{01}-a_{02}-1)p$.

```{r}
Omega_adas <- t(X_adas) %*% X_adas
Omega0_adas <- t(X0_adas) %*% X0_adas
Omega_mmse <- t(X_mmse) %*% X_mmse
Omega0_mmse <- t(X0_mmse) %*% X0_mmse

Xy_adas <- t(X_adas) %*% y_adas
Xy0_adas <- t(X0_adas) %*% y0_adas
Xy_mmse <- t(X_mmse) %*% y_mmse
Xy0_mmse <- t(X0_mmse) %*% y0_mmse

p <- ncol(X_adas)
n <- nrow(ADNIGO2); n0 <- nrow(ADNI1)

SSE_adas <- sum(resid(lm(y_adas ~ X_adas + 0))^2)
SSE0_adas <- sum(resid(lm(y0_adas ~ X0_adas + 0))^2)
SSE_mmse <- sum(resid(lm(y_mmse ~ X_mmse + 0))^2)
SSE0_mmse <- sum(resid(lm(y0_mmse ~ X0_mmse + 0))^2)

bp3 <- function(a01, a02) {
        #browser()
        Sig_adas <- solve(Omega_adas + a01 * Omega0_adas)
        Sig_mmse <- solve(Omega_mmse + a01 * Omega0_mmse)
        mu_adas <- Sig_adas %*% (Xy_adas + a01 * Xy0_adas)
        mu_mmse <- Sig_mmse %*% (Xy_mmse + a01 * Xy0_mmse)
        v <- n + a02 * n0 + (a01 - a02 - 1) * p
        SSE_post_adas <- as.numeric(sum(y_adas^2) + 
                a01 * t(Xy0_adas) %*% solve(Omega0_adas, Xy0_adas) + 
                a02 * SSE0_adas - 
                t(Xy_adas + a01 * Xy0_adas) %*% mu_adas)
        SSE_post_mmse <- as.numeric(sum(y_mmse^2) + 
                a01 * t(Xy0_mmse) %*% solve(Omega0_mmse, Xy0_mmse) + 
                a02 * SSE0_mmse - 
                t(Xy_mmse + a01 * Xy0_mmse) %*% mu_mmse)
        Sigma_adas <- SSE_post_adas * Sig_adas / v
        Sigma_mmse <- SSE_post_mmse * Sig_mmse / v
        res1 <- tibble(
                outcome = c(rep("adas", 10), rep("mmse", 10)), 
                variable = c(
                        colnames(Omega_adas),
                        colnames(Omega_mmse)
                ),
                EST = c(
                        mu_adas, 
                        mu_mmse
                ), 
                S = c(
                        diag(Sigma_adas), 
                        diag(Sigma_mmse)
                ), 
                SD = sqrt(v/(v-2) * S),
                LB = qt(0.025, df = v)*sqrt(S) + EST,
                UB = qt(0.975, df = v)*sqrt(S) + EST
        ) %>% select(-c(S))
        res2 <- tibble(
                outcome = c("adas", "mmse"),
                variable = "sigma",
                EST = c(
                        sqrt(SSE_post_adas / (v-2)),
                        sqrt(SSE_post_mmse / (v-2))
                )
        )
        bind_rows(res1, res2) %>% 
                mutate(a01 = a01, a02 = a02) %>% 
        mutate(across(EST:UB, \(x) round(x, 3))) 
}

bp3_res <- expand.grid(
        a01 = c(0.1, 0.5, 1.0), a02 = c(0.0, 0.5, 1.0)
) %>%
        rowwise() %>% group_split() %>% 
        map_dfr(~bp3(.$a01, .$a02))


```

### Partial Borrowing-by-Parts Power Prior

$$
\gamma|D,D_0,a_{01},a_{02}\sim t(m, S, v^*)
$$

where $$
m = \frac{z'(I-H^*)y+a_{01}z_0'(I_0-H_0^*)y_0}{z'(I-H^*)z+a_{01}z_0'(I_0-H_0^*)z_0}
$$

and

$$
S = \frac{y'y+a_{02}SSE_0 + a_{01}\hat{\beta}_0'\Omega_0^{\ast} \hat{\beta}_0-(X'y+a_{01}\Omega_0^\ast\hat{\beta}_0)'(X'X+a_{01}\Omega_0^\ast)^{-1}(X'y+a_{01}\Omega_0^\ast\hat{\beta}_0)}{v^*\{z'(I-H^*)z+a_{01}z_0'(I_0-H_0^*)z_0\}}
$$

where $v^* = n + a_{02}n_0 + (a_{01}-a_{02}-2)p+1$ if $a_{01}>0$.

```{r}

pbp3 <- function(a01, a02, gamma_position = 2L) {
        #browser()
        # m_adas <- (zIHy_adas + a01 * zIHy0_adas) / (zIHz_adas + a01 * zIHz0_adas)
        # m_mmse <- (zIHy_mmse + a01 * zIHy0_mmse) / (zIHz_mmse + a01 * zIHz0_mmse)
        Xast_adas <- X_adas[, -gamma_position]
        X0ast_adas <- X0_adas[, -gamma_position]
        Xast_mmse <- X_mmse[, -gamma_position]
        X0ast_mmse <- X0_mmse[, -gamma_position]
        
        IHast_adas <- diag(531) - Xast_adas %*% solve(t(Xast_adas)%*% Xast_adas, t(Xast_adas))
        IH0ast_adas <- diag(504) - X0ast_adas %*% solve(t(X0ast_adas)%*% X0ast_adas, t(X0ast_adas))
        IHast_mmse <- diag(531) - Xast_mmse %*% solve(t(Xast_mmse)%*% Xast_mmse, t(Xast_mmse))
        IH0ast_mmse <- diag(504) - X0ast_mmse %*% solve(t(X0ast_mmse)%*% X0ast_mmse, t(X0ast_mmse))
        
        z <- X_adas[, gamma_position]
        z0 <- X0_adas[, gamma_position]
        
        zIHy_adas <- t(z) %*% IHast_adas %*% y_adas
        zIHy0_adas <- t(z0) %*% IH0ast_adas %*% y0_adas
        zIHz_adas <- t(z) %*% IHast_adas %*% z
        zIHz0_adas <- t(z0) %*% IH0ast_adas %*% z0
        zIHy_mmse <- t(z) %*% IHast_mmse %*% y_mmse
        zIHy0_mmse <- t(z0) %*% IH0ast_mmse %*% y0_mmse
        zIHz_mmse <- t(z) %*% IHast_mmse %*% z
        zIHz0_mmse <- t(z0) %*% IH0ast_mmse %*% z0
        
        gamma0_adas <- zIHy0_adas / zIHz0_adas
        gamma0_mmse <- zIHy0_mmse / zIHz0_mmse
        
        .Omega0_adas <- matrix(0, 10, 10)
        .Omega0_adas[gamma_position,gamma_position] <- zIHz0_adas
        .Omega0_mmse <- matrix(0, 10, 10)
        .Omega0_mmse[gamma_position,gamma_position] <- zIHz0_mmse
        
        Sig_adas <- solve(Omega_adas + a01 * .Omega0_adas)
        Sig_mmse <- solve(Omega_mmse + a01 * .Omega0_mmse)
        Omebeta0_adas <- rep(0,10)
        Omebeta0_adas[gamma_position] <- zIHy0_adas
        Omebeta0_mmse <- rep(0,10)
        Omebeta0_mmse[gamma_position] <- zIHy0_mmse
        
        mu_adas <- Sig_adas %*% (Xy_adas + a01 * Omebeta0_adas)
        mu_mmse <- Sig_mmse %*% (Xy_mmse + a01 * Omebeta0_mmse)
        if(dplyr::near(a01, 0)) {
                v <- n + a02*n0 - (a02 + 1) * p
        } else {
                v <- n + a02*n0 + 1 + (a01 - a02 - 2) * p
        }
        SSE_post_adas <- as.numeric(sum(y_adas^2) + 
                a01 * zIHy0_adas^2 / zIHz0_adas + 
                a02 * SSE0_adas - 
                t(Xy_adas + a01 * Omebeta0_adas) %*% mu_adas)
        SSE_post_mmse <- as.numeric(sum(y_mmse^2) + 
                a01 * zIHy0_mmse^2 / zIHz0_mmse + 
                a02 * SSE0_mmse - 
                t(Xy_mmse + a01 * Omebeta0_mmse) %*% mu_mmse)
        Sigma_adas <- SSE_post_adas * Sig_adas / v
        Sigma_mmse <- SSE_post_mmse * Sig_mmse / v
        res1 <- tibble(
                outcome = c("adas", "mmse"), 
                variable = colnames(Omega_adas)[gamma_position],
                EST = c(
                        mu_adas[gamma_position], 
                        mu_mmse[gamma_position]
                ), 
                S = c(
                        diag(Sigma_adas)[gamma_position], 
                        diag(Sigma_mmse)[gamma_position]
                ), 
                SD = sqrt(v/(v-2) * S),
                LB = qt(0.025, df = v)*sqrt(S) + EST,
                UB = qt(0.975, df = v)*sqrt(S) + EST
        ) %>% select(-c(S))
        res2 <- tibble(
                outcome = c("adas", "mmse"),
                variable = "sigma",
                EST = c(
                        sqrt(SSE_post_adas / (v-2)),
                        sqrt(SSE_post_mmse / (v-2))
                )
        )
        bind_rows(res1, res2) %>% 
                mutate(a01 = a01, a02 = a02, ) %>% 
        mutate(across(EST:UB, \(x) round(x, 3))) 
}
pbp3_res <- expand.grid(
        a01 = c(0.1, 0.5, 1.0), 
        a02 = 0, 
        pos = 1:10
) %>%
        rowwise() %>% group_split() %>% 
        map_dfr(~pbp3(.$a01, .$a02, .$pos))

res <- bind_rows(
        bp3_res %>% mutate(prior = "bp3", .before = everything()),
        pbp3_res %>% mutate(prior = "partial_bp3", .before = everything())
)

res %>% mutate(
        EST = m,
        SD = sqrt(df/(df-2) * S), 
        LB = qt(0.025, df = df)*sqrt(S) + m,
        UB = qt(0.975, df = df)*sqrt(S) + m,
        .after = outcome
) %>% arrange(a01, a02, outcome) %>% 
        write_csv("ADNI_analysis_bp3_and_pbp3.csv")
```

### Partial Borrowing Power Priors

$$
\beta | \sigma^2,\sigma_h^2,D,D_0,a_{0} \sim N\left((\sigma^{-2}X'X+a_0\sigma_h^{-2}X_0'X_0)^{-1}(\sigma^{-2}X'y+a_0\sigma_h^{-2}X_0'y_0),\ (\sigma^{-2}X'X+a_0\sigma_h^{-2}X_0'X_0)^{-1}\right)
$$

$$
\sigma^2|\beta,D,D_0,a_0\sim IG(0.5n,0.5\lVert y-X\beta\rVert^2)
$$ $$
\sigma^2_h|\beta,D,D_0,a_0\sim IG(0.5a_0n_0,0.5a_0\lVert y_0-X_0\beta\rVert^2)
$$

```{r}
library(mvtnorm)
pbpp <- function(a0, n_sample = 50000L, burn_in = 10000L) {
        M <- n_sample + burn_in
        beta_adas <- vector("list", M)
        beta_mmse <- vector("list", M)
        w_adas <- vector("list", M)
        w_mmse <- vector("list", M)
        w0_adas <- vector("list", M)
        w0_mmse <- vector("list", M)
        beta_adas[[1]] <- 0; beta_mmse[[1]] <- 0 
        w_adas[[1]] <- 1; w_mmse[[1]] <- 1
        w0_adas[[1]] <- 1; w0_mmse[[1]] <- 1
        for(i in 2:M) {
                post_var_adas <- solve(w_adas[[i-1]]*Omega_adas + a0*w0_adas[[i-1]]*Omega0_adas)
                post_var_mmse <- solve(w_mmse[[i-1]]*Omega_mmse + a0*w0_mmse[[i-1]]*Omega0_mmse)
                beta_adas[[i]] <- rmvnorm(
                        1, post_var_adas %*% (w_adas[[i-1]]*Xy_adas + a0*w0_adas[[i-1]]*Xy0_adas),
                        post_var_adas
                )
                beta_mmse[[i]] <- rmvnorm(
                        1, post_var_mmse %*% (w_mmse[[i-1]]*Xy_mmse + a0*w0_mmse[[i-1]]*Xy0_mmse),
                        post_var_mmse
                )
                w_adas[[i]] <- rgamma(1, shape = 0.5*n, rate = 0.5*sum((y_adas - X_adas %*% as.numeric(beta_adas[[i]]))^2))
                w_mmse[[i]] <- rgamma(1, shape = 0.5*n, rate = 0.5*sum((y_mmse - X_mmse %*% as.numeric(beta_mmse[[i]]))^2))
                w0_adas[[i]] <- rgamma(1, shape = 0.5*n0, rate = 0.5*sum((y0_adas - X0_adas %*% as.numeric(beta_adas[[i]]))^2))
                w0_mmse[[i]] <- rgamma(1, shape = 0.5*n0, rate = 0.5*sum((y0_mmse - X0_mmse %*% as.numeric(beta_mmse[[i]]))^2))
        }
        #browser()
        B_adas <- reduce(beta_adas[(burn_in+1):M], rbind)
        B_mmse <- reduce(beta_mmse[(burn_in+1):M], rbind)
        w_adas <- unlist(w_adas[(burn_in+1):M])
        w_mmse <- unlist(w_mmse[(burn_in+1):M])
        mu_adas <- colMeans(B_adas)
        mu_mmse <- colMeans(B_mmse)
        SD_adas <- apply(B_adas, 2, sd)
        SD_mmse <- apply(B_mmse, 2, sd)
        hpd_adas <- apply(
                B_adas[, c(1,2,4)], 2, \(x) boa::boa.hpd(x, 0.05)
        )
        hpd_mmse <- apply(
                B_mmse[, c(1,2,10)], 2, \(x) boa::boa.hpd(x, 0.05)
        )
        # DIC_adas <- -n*log(mean(1/w_adas)) - 
        #         sum((y_adas - X_adas %*% colMeans(B_adas))^2) / mean(1/w_adas) - 2 * n * mean(log(w_adas)) + 
        #         2 * mean(w_adas * colSums((y_adas - X_adas %*% t(B_adas))^2))
        # DIC_mmse <- -n*log(mean(1/w_mmse)) - 
        #         sum((y_mmse - X_mmse %*% colMeans(B_mmse))^2) / mean(1/w_mmse) - 2 * n * mean(log(w_mmse)) + 
        #         2 * mean(w_mmse * colSums((y_mmse - X_mmse %*% t(B_mmse))^2))
        
        # return(list(
        #         B_adas = B_adas,
        #         B_mmse = B_mmse, 
        #         DIC = tibble(adas = DIC_adas, mmse = DIC_mmse),
        #         a = a0
        # ))
        res1 <- tibble(
                outcome = c(rep("adas", 3), rep("mmse", 3)), 
                variable = c(
                        "Intercept", "MCI", "Male", 
                        "Intercept", "MCI", "Education"
                ),
                EST = c(
                        mu_adas[c(1,2,4)], 
                        mu_mmse[c(1,2,10)]
                ), 
                SD = c(
                        SD_adas[c(1,2,4)], 
                        SD_mmse[c(1,2,10)]
                ), 
                LB = c(
                        hpd_adas[1, ], 
                        hpd_mmse[1, ]
                ), 
                UB = c(
                        hpd_adas[2, ], 
                        hpd_mmse[2, ]
                )
        )
        res2 <- tibble(
                outcome = c("adas", "mmse"),
                variable = "sigma",
                EST = c(
                        mean(sqrt(1/w_adas)),
                        mean(sqrt(1/w_mmse))
                )
        )
        res <- bind_rows(res1, res2) %>% 
                mutate(a0 = a0) %>% 
        mutate(across(EST:UB, \(x) round(x, 3))) 
        mcmc <- list(
                B_adas = B_adas,
                B_mmse = B_mmse, 
                w_adas = w_adas,
                w_mmse = w_mmse
        )
        return(list(res = res, mcmc = mcmc))
}
system.time(
        pbpp_res1 <- pbpp(0.1)
)
saveRDS(pbpp_res1, "ADNI_partial borrowing power prior_0.1.rds")
system.time(
        pbpp_res2 <- pbpp(0.5)
)
saveRDS(pbpp_res2, "ADNI_partial borrowing power prior_0.5.rds")
system.time(
        pbpp_res3 <- pbpp(1)
)
saveRDS(pbpp_res3, "ADNI_partial borrowing power prior_1.rds")

library(coda)
mcmc_mmse1 <- mcmc(pbpp_res1$mcmc$B_mmse[,2])
mcmc_adas1 <- mcmc(pbpp_res1$mcmc$B_adas[,2])

mcmc_mmse2 <- mcmc(pbpp_res2$mcmc$B_mmse[,2])
mcmc_adas2 <- mcmc(pbpp_res2$mcmc$B_adas[,2])

mcmc_mmse3 <- mcmc(pbpp_res3$mcmc$B_mmse[,2])
mcmc_adas3 <- mcmc(pbpp_res3$mcmc$B_adas[,2])

par(mfrow = c(3, 1))
traceplot(mcmc_mmse1, main = "MMSE; discounting = 0.1")
traceplot(mcmc_mmse2, main = "MMSE; discounting = 0.5")
traceplot(mcmc_mmse3, main = "MMSE; discounting = 1.0")

par(mfrow = c(3, 1))
traceplot(mcmc_adas1, main = "ADAS; discounting = 0.1")
traceplot(mcmc_adas2, main = "ADAS; discounting = 0.5")
traceplot(mcmc_adas3, main = "ADAS; discounting = 1.0")

par(mfrow = c(3, 1))
acf(mcmc_mmse1, main = "MMSE; discounting = 0.1", ylim = c(-0.02, 0.02))
acf(mcmc_mmse2, main = "MMSE; discounting = 0.5", ylim = c(-0.02, 0.02))
acf(mcmc_mmse3, main = "MMSE; discounting = 1.0", ylim = c(-0.02, 0.02))

par(mfrow = c(3, 1))
acf(mcmc_adas1, main = "ADAS; discounting = 0.1", ylim = c(-0.02, 0.02))
acf(mcmc_adas2, main = "ADAS; discounting = 0.5", ylim = c(-0.02, 0.02))
acf(mcmc_adas3, main = "ADAS; discounting = 1.0", ylim = c(-0.02, 0.02))

```

### IPTW + Power Prior

$$
\beta|D,D_0\sim t\left((X'X+a_0X_0'AX_0)^{-1}(X'y+a_0X_0'Ay_0),\\
\frac{y'y+a_0y_0'Ay_0-(X'y+a_0X_0'Ay_0)'(X'X+a_0X_0'AX_0)^{-1}(X'y+a_0X_0'Ay_0)}{n+a_0n_0-p}(X'X+a_0X_0'AX_0)^{-1}\right)
$$

where $A = \mathrm{diag}(a_{0i})$.

```{r}
dat1 <- bind_rows(ADNI1, ADNIGO2) %>% 
        mutate(code = if_else(cohort == "ADNIGO2", 1L, 0L)) 
PS_adas <- glm(code ~ state + age + gender + ravlt + apoe4 + 
                       adas_bl + married + white + edu, 
                data = dat1, family = binomial()) %>% 
        fitted() %>% .[1:504]
wast_adas <- PS_adas / (1 - PS_adas)
w_adas <- wast_adas / sum(wast_adas) * 504
a_adas <- PS_adas * w_adas
A_adas <- diag(a_adas)

PS_mmse <- glm(code ~ state + age + gender + ravlt + apoe4 + 
                       mmse_bl + married + white + edu, 
                data = dat1, family = binomial()) %>% 
        fitted() %>% .[1:504]
wast_mmse <- PS_mmse / (1 - PS_mmse)
w_mmse <- wast_mmse / sum(wast_mmse) * 504
a_mmse <- PS_mmse * w_mmse
A_mmse <- diag(a_mmse)

AOmega0_adas <- t(X0_adas) %*% A_adas %*% X0_adas
AOmega0_mmse <- t(X0_mmse) %*% A_mmse %*% X0_mmse
AXy0_adas <- t(X0_adas) %*% A_adas %*% y0_adas
AXy0_mmse <- t(X0_mmse) %*% A_mmse %*% y0_mmse

iptw_pp <- function(a0) {
        #browser()
        Sig_adas <- solve(Omega_adas + a0 * AOmega0_adas)
        Sig_mmse <- solve(Omega_mmse + a0 * AOmega0_mmse)
        mu_adas <- Sig_adas %*% (Xy_adas + a0 * AXy0_adas)
        mu_mmse <- Sig_mmse %*% (Xy_mmse + a0 * AXy0_mmse)
        v <- n + a0 * n0 - p
        SSE_post_adas <- as.numeric(sum(y_adas^2) + 
                a0 * t(y0_adas) %*% A_adas %*% y0_adas - 
                t(Xy_adas + a0 * AXy0_adas) %*% mu_adas)
        SSE_post_mmse <- as.numeric(sum(y_mmse^2) + 
                a0 * t(y0_mmse) %*% A_mmse %*% y0_mmse - 
                t(Xy_mmse + a0 * AXy0_mmse) %*% mu_mmse)
        Sigma_adas <- SSE_post_adas * Sig_adas / v
        Sigma_mmse <- SSE_post_mmse * Sig_mmse / v
        res1 <- tibble(
                outcome = c(rep("adas", 10), rep("mmse", 10)), 
                variable = c(
                        colnames(Omega_adas),
                        colnames(Omega_mmse)
                ),
                EST = c(
                        mu_adas, 
                        mu_mmse
                ), 
                S = c(
                        diag(Sigma_adas), 
                        diag(Sigma_mmse)
                ), 
                SD = sqrt(v/(v-2) * S),
                LB = qt(0.025, df = v)*sqrt(S) + EST,
                UB = qt(0.975, df = v)*sqrt(S) + EST
        ) %>% select(-c(S))
        res2 <- tibble(
                outcome = c("adas", "mmse"),
                variable = "sigma",
                EST = c(
                        sqrt(SSE_post_adas / (v-2)),
                        sqrt(SSE_post_mmse / (v-2))
                )
        )
        bind_rows(res1, res2) %>% 
                mutate(a0 = a0) %>% 
        mutate(across(EST:UB, \(x) round(x, 3))) 
}

iptw_pp(1) %>% view

```
